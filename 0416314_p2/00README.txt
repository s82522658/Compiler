README for the Parser project, 20141003


For all parts of the compiler project,
please see the web page
	
          http://people.cs.nctu.edu.tw/~wuuyang/homepage/Lecture/lecture.compiler.html

"Local On-Line Information" section for additional project material that might be helpful to your project.  Good luck.




For the second part of the compiler project, you will need to implement a parser. The syntax of our target langauge {\it Mini-Pascal} is given in the file ``MINI-PASCAL-GRAMMAR.pdf''. We will use the yacc tool.  You need to prepare for the input for the yacc tool. A sample input --- the ``pascal.y'' file, which is the syntax for the {\it complete} Pascal language --- is provided. You can study it and remove or change production rules in the file.

The output of the parser, in addition to the output of the scanner,
should be the list of actions of the parser, for example,
	
	shift
	shift
	shift
	reduce rule 3
	shift
	reduce rule 6
	...

Your parser should build the parse tree or the abstract syntax tree of the input program. You may consult slide 9-96 (Chapter 9, 1st example) for building an abstract syntax tree in the parser. This abstract syntax tree will be useful in the 3rd and 4th part of your project.

The file "standard-pascal.y" contains the complete grammar for Standard Pascal. You can try to run yacc on this grammar:

	yacc standard-pascal.y

two files should be generated: y.tab.c and y.tab.h. Then you may combine the scanner (generated by lex) with the parser (generated by yacc).  See the zip file "SAMPLE-COMBINE-LEX-AND-YACC.zip", which is located on the E3 platform.

Unpack the zip file "SAMPLE-COMBINE-LEX-AND-YACC.zip".
You may study the main() procedure (in the yacctest.c file). The main() procedure calls the yyparse() procedure (in the y.tab.c file).  The yyparse() procdure calls the yylex() proceudre (in the lex.yy.c file).

In the test-compiler directory, there are 16 Mini-Pascal programs. You may use them to try your parser.

You can study the document: ``Lex - A Lexical Analyzer Generator.mht'' to understand the connection between lex and yacc.

If you still have problems, please come to discuss with me.  Please do not leave the project blank.


Wuu  20141003

----
附註

在PARSER-PROJECT-HANDOUT中，是standard-pascal.y。我們沒有提供mini-pascal.y。但是在MINI-PASCAL-LANGUAGE-SPEC，我們有MINI-PASCAL-GRAMMAR.txt (grammar)，你可以將此mini-pascal的文法，改寫成yacc的格式，再執行yacc 。

y.tab.h是由yacc產生，必須先執行yacc才看得到。

關於合併使用lex和yacc，請參考SAMPLE-COMBINE-LEX-AND-YACC，裡面有八個範例。


----- ignore the rest of this file. Old material.

The directory file "SAMPLE-ADACS-COMPILER" is a small, incomplete compiler for the Ada programming language.  The file "adacs.l" is the lex input and the file "adacs.y" is the yacc input. The file "mips.refs" includes issues related to the MIPS processor. You may study the main() procedure (in the main.c file). The main() procedure calls the yyparse() procedure (in the y.tab.c file).  The yyparse() procdure calls the yylex() proceudre (in the lex.yy.c file).